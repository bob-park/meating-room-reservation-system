buildscript {
    ext {
        queryDslVersion = "5.0.0"
        springBootVersion = '2.6.2'
        dependencyManagementVersion = '1.0.11.RELEASE'
    }
    repositories {
        mavenCentral()

        maven {
            url "https://plugins.gradle.org/m2/"  //gradle 플러그인 URL
        }
    }
    dependencies {
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}"
            classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.4'
        }
    }
}

plugins {
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

allprojects {
    ext {
        springCloudVersion = '3.0.4'
        springCloudNetflixVersion = '3.0.4'
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'org.asciidoctor.jvm.convert'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }

        testClasses {
            extendsFrom(testImplementation)
        }

        asciidoctorExt

    }

    task testJar(type: Jar) {
        archiveClassifier.set('test')
        from sourceSets.test.output
    }

    artifacts {
        testClasses testJar
    }

    repositories {
        mavenCentral()
    }

    ext {
        set('springCloudVersion', "2021.0.0")
    }

    dependencies {
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
        implementation 'org.springframework.boot:spring-boot-starter-test'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'

        // guava
        implementation 'com.google.guava:guava:31.0.1-jre'
        implementation 'com.google.code.gson:gson:2.9.0'

        // apache commons
        implementation 'org.apache.commons:commons-lang3:3.12.0'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        // rest assured & asciidoc
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

        // jwt
        implementation 'io.jsonwebtoken:jjwt:0.9.1'


        if (project.name != 'm2rs-core') {
            implementation project(':m2rs-core')
            testImplementation project(path: ':m2rs-core', configuration: 'testClasses')

            if (project.name != "m2rs-discovery-service") {
                implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${springCloudNetflixVersion}"
                implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
                implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

                implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'

                if (project.name != "m2rs-config-service") {
                    implementation 'org.springframework.cloud:spring-cloud-starter-config'


                    if (project.name != "m2rs-api-gateway-service") {
                        // db
                        implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'
                        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
                        implementation 'org.flywaydb:flyway-core'
                        runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

                        // spring security
                        implementation 'org.springframework.boot:spring-boot-starter-security'
                        testImplementation 'org.springframework.security:spring-security-test'
                        implementation 'org.springframework.boot:spring-boot-starter-web'


                        // querydsl
                        implementation("com.querydsl:querydsl-jpa:${queryDslVersion}")
                        annotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")
                        testAnnotationProcessor("com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

                        annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
                        annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
                    }
                }
            }
        }


    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    ext {
        snippetsDir = file('./build/generated-snippets')
    }


    test {
        useJUnitPlatform()
        outputs.dir snippetsDir
    }

    asciidoctor {
        sourceDir 'src/docs/asciidoc'

        inputs.dir snippetsDir
        configurations 'asciidoctorExt'
        attributes 'snippets': snippetsDir

        dependsOn test
    }

    asciidoctor.doFirst {
        delete file('src/main/resources/static/docs')
    }

    task copyDocument(type: Copy) {
        dependsOn asciidoctor
        from file("build/docs/asciidoc")
        into file("src/main/resources/static/docs")
    }

    build {
        dependsOn copyDocument
    }

}